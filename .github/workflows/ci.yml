# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: FSLab Test AWS CI/CD

on:
  push:
    branches: 
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 15
        cache: 'npm'
        cache-dependency-path: codebase/rdicidr-0.1.0/package-lock.json
    
    - name: Execute code
      working-directory: codebase/rdicidr-0.1.0
      run: npm install

    - name: Run Lint
      working-directory: codebase/rdicidr-0.1.0
      run: npm run lint
    
    - name: Run prettier
      working-directory: codebase/rdicidr-0.1.0
      run: npm run prettier || true

    - name: run test
      working-directory: codebase/rdicidr-0.1.0
      run: CI=true npm run test

    - name: run build
      working-directory: codebase/rdicidr-0.1.0
      run: npm run build --if-present
  
  buildimage:
    
    name: Deploy_test
    runs-on: ubuntu-latest
    needs:  [build]

    steps:
      
      - name: checkout
        uses: actions/checkout@v4

      - name: build dockerfile
        working-directory: codebase/rdicidr-0.1.0
        run: |
          echo "${{ secrets.GHR_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/imagefstry2:latest .
          docker push ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/imagefstry2:latest
  
  deploy:
    name: Deploy to AWS ECS
    runs-on: ubuntu-latest
    needs: [buildimage]

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Debug Task Definition JSON
        run: cat ./task-definition.json

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-2

      - name: Update ECS Task Definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ./task-definition.json
          container-name: app-container  # Change to your container name
          image: ghcr.io/daniel55247/try2/imagefstry2:latest
        
      - name: Deploy to Amazon ECS
        uses: aws-actions/amazon-ecs-deploy-task-definition@v2
        with:
          task-definition: task-definition.json
          service: test-service
          cluster: testCluster
          wait-for-service-stability: true

