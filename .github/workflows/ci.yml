# This workflow will do a clean installation of node dependencies, cache/restore them, build the source code and run tests across different versions of node
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-nodejs

name: FSLab Test AWS CI/CD

on:
  push:
    branches: 
      - main

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  build:

    runs-on: ubuntu-latest

    steps:
    
    - name: Checkout
      uses: actions/checkout@v4

    - name: Use Node.js
      uses: actions/setup-node@v4
      with:
        node-version: 15
        cache: 'npm'
        cache-dependency-path: codebase/rdicidr-0.1.0/package-lock.json
    
    - name: Execute code
      working-directory: codebase/rdicidr-0.1.0
      run: npm install

    - name: Run Lint
      working-directory: codebase/rdicidr-0.1.0
      run: npm run lint
    
    - name: Run prettier
      working-directory: codebase/rdicidr-0.1.0
      run: npm run prettier || true

    - name: run test
      working-directory: codebase/rdicidr-0.1.0
      run: CI=true npm run test

    - name: run build
      working-directory: codebase/rdicidr-0.1.0
      run: npm run build --if-present
  
  deploy:
    
    name: Deploy_test
    runs-on: ubuntu-latest
    needs:  [build]

    steps:
      
      - name: checkout
        uses: actions/checkout@v4

      - name: build dockerfile
        working-directory: codebase/rdicidr-0.1.0
        run: |
          echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u ${{ github.actor }} --password-stdin
          docker build -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/imagefstry2:latest .
          docker push -t ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}/imagefstry2:latest .